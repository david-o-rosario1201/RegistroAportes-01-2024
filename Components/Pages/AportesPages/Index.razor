@page "/Aportes"
@inject AportesService aportesService
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject NavigationManager navigation
@inject ToastService toastService

<PageTitle>Aportes</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Aportes</strong></h3>
			<button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle" /> Crear</button>
			<button type="button" class="btn btn-outline-info" @onclick="IrADetalles"><i class="bi bi-card-list" /> Detalles</button>
		</div>
		@*Body*@
		<div class="card-body">
			@if (aportes.Count == 0)
			{
				<div class="d-flex justify-content-center">
					<div class="spinner-border text-info" role="status">
						<span class="visually-hidden">Cargando...</span>
					</div>
				</div>
			}
			else
			{
				@*Fechas*@
				<div class="mb-3">
					<div class="row">
						<div class="col-3">
							<label class="form-label" for="desde"><strong>Desde:</strong></label>
							<InputDate id="desde" class="form-control" @bind-Value="desde"></InputDate>
						</div>
						<div class="col-3">
							<label class="form-label" for="hasta"><strong>Hasta:</strong></label>
							<InputDate id="hasta" class="form-control" @bind-Value="hasta"></InputDate>
						</div>
					</div>
				</div>

				@*Campos a Filtrar*@
				<div class="mb-3">
					<div class="row align-items-center">
						<label class="form-label" for="filtro"><strong>Campo a Filtrar:</strong></label>
						<div class="col-3">
							<InputSelect id="filtro" class="form-select" @bind-Value="filtro">
								<option>Elije una opci&oacute;n</option>
								<option value="aporte id">Aporte Id</option>
								<option value="persona">Persona</option>
							</InputSelect>
						</div>
						<div class="col-auto miFlecha">
							<p>→</p>
						</div>
						<div class="col-4">
							<div class="input-group">
								<InputText class="form-control" @bind-Value="valorFiltro" placeholder="Ingrese un dato para filtrar"></InputText>
								<button type="button" class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search" /></button>
							</div>
						</div>
						<div class="col-3">
							<button type="button" class="btn btn-outline-secondary" @onclick="Restablecer"><i class="bi bi-arrow-clockwise" /> Restablecer</button>
						</div>
					</div>
				</div>

				<table class="table">
					<thead>
						<tr>
							<th>Aporte Id</th>
							<th>Fecha</th>
							<th>Persona</th>
							<th>Observaci&oacute;n</th>
							<th>Monto</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var aporte in aportes)
						{
							<tr>
								<td>@aporte.AporteId</td>
								<td>@aporte.Fecha.ToShortDateString()</td>
								<td>@aporte.Persona</td>
								<td>@aporte.Observacion</td>
								<td>@aporte.Monto</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
		@*Footer*@
		<div class="card-footer">
			<div class="row">
				<div class="col-10">
					<p><strong>Total de Aportes:</strong> @aportes.Count</p>
				</div>
				<div class="col">
					<p><strong>Monto Total:</strong> @montoTotal</p>
				</div>
			</div>
		</div>
	</div>
</div>

<Toast @ref="toastService.ToastComponent" Duration="4000" IconClass="bi bi-info-circle" Persist="true"/>

@code {
	public List<Aportes> aportes = new List<Aportes>();
	public decimal montoTotal { get; set; }
	public DateTime desde { get; set; } = DateTime.Today;
	public DateTime hasta { get; set; } = DateTime.Today;
	public string filtro { get; set; }
	public string valorFiltro { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		aportes = await aportesService.Listar(a => a.AporteId > 0);
		montoTotal = aportes.Sum(a => a.Monto);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		montoTotal = aportes.Sum(a => a.Monto);
		StateHasChanged();
	}

	public void ShowToastError(string mensaje) => toastService.ShowDangerToast("Busqueda de Aportes",mensaje);
	public void ShowToastSuccess(string mensaje) => toastService.ShowSuccessToast("Busqueda de Aportes",mensaje);

	public async Task Buscar()
	{
		if (desde > hasta)
		{
			ShowToastError("La fecha inicial no puede ser mayor a la fecha final");
			await Task.Delay(3000);
			return;
		}
		if (valorFiltro == null)
		{
			ShowToastError("Debe ingresar un dato");
			await Task.Delay(3000);
			return;
		}
		List<Aportes> filtradoList1 = new List<Aportes>();
		if (filtro == "aporte id")
		{
			if (int.TryParse(valorFiltro, out int id))
			{
				filtradoList1 = await aportesService.Listar(a => a.AporteId == id);
				Filtrado(filtradoList1);
			}
			else
			{
				ShowToastError("El valor ingresado para AporteId no es válido");
				await Task.Delay(3000);
			}
		}
		else if (filtro == "persona")
		{
			filtradoList1 = await aportesService.Listar(a => a.Persona == valorFiltro);
			Filtrado(filtradoList1);
		}
		else
		{
			ShowToastError("Debe elegir un método parar filtrar");
			await Task.Delay(3000);
		}
	}

	public async Task Restablecer()
	{
		aportes = await aportesService.Listar(a => a.AporteId > 0);
		montoTotal = aportes.Sum(a => a.Monto);
		ShowToastSuccess("Lo datos fueron resstablecidos");
	}

	public async Task Filtrado(List<Aportes> filtrados)
	{
		List<Aportes> filtradoList2 = new List<Aportes>();
		foreach (var filtrado in filtrados)
		{
			if (filtrado.Fecha >= desde && filtrado.Fecha <= hasta)
				filtradoList2.Add(filtrado);
		}

		if (filtradoList2.Count != 0)
		{
			aportes = filtradoList2;
			ShowToastSuccess("Se encontraron resultados");
		}
		else
		{
			ShowToastError("No se encontraron resultados");
			await Task.Delay(3000);
		}
	}

	public void IrACrear()
	{
		navigation.NavigateTo("/CreateAportes");
	}
	public void IrADetalles()
	{
		navigation.NavigateTo("/DetailsAportes");
	}
}
