@page "/EditAportes"
@page "/EditAportes/aporteid={aporteId:int}"
@inject AportesService aportesService
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject NavigationManager navigation
@inject ToastService toastService

<PageTitle>Editar Aporte</PageTitle>
<EditForm Model="aporte" OnValidSubmit="Modificar" OnInvalidSubmit="ShowToastFail">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			@*Header*@
			<div class="card-header">
				<h3><strong>Editar Aporte</strong></h3>
			</div>
			@*Body*@
			<div class="card-body">
				@*AporteId*@
				<div class="mb-3">
					<div class="col-4">
						<label class="form-label" for="aporteid"><strong>Aporte Id:</strong></label>
						<InputNumber id="aporteid" class="form-control" @bind-Value="aporte.AporteId"></InputNumber>
					</div>
				</div>
				@*Fecha*@
				<div class="mb-3">
					<div class="col-4">
						<label class="form-label" for="fecha"><strong>Fecha:</strong></label>
						<InputDate id="fecha" class="form-control" @bind-Value="aporte.Fecha"></InputDate>
						<ValidationMessage For="@(() => aporte.Fecha)"></ValidationMessage>
					</div>
				</div>
				@*Persona*@
				<div class="mb-3">
					<div class="col-4">
						<label class="form-label" for="persona"><strong>Persona:</strong></label>
						<InputText id="persona" class="form-control" @bind-Value="aporte.Persona" placeholder="Escriba su nombre"></InputText>
						<ValidationMessage For="@(() => aporte.Persona)"></ValidationMessage>
					</div>
				</div>
				@*Observación*@
				<div class="mb-3">
					<div class="col-4">
						<label class="form-label" for="observacion"><strong>Observaci&oacute;n:</strong></label>
						<InputTextArea id="observacion" class="form-control" @bind-Value="aporte.Observacion" placeholder="Escriba una observación"></InputTextArea>
						<ValidationMessage For="@(() => aporte.Observacion)"></ValidationMessage>
					</div>
				</div>
				@*Monto*@
				<div class="mb-3">
					<div class="col-4">
						<label class="form-label" for="monto"><strong>Monto:</strong></label>
						<InputNumber id="monto" class="form-control" @bind-Value="aporte.Monto"></InputNumber>
						<ValidationMessage For="@(() => aporte.Monto)"></ValidationMessage>
					</div>
				</div>
			</div>
			@*Footer*@
			<div class="card-footer d-flex justify-content-center">
				<div class="px-2">
					<button type="button" class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill" /> Modificar</button>
			</div>
		</div>
	</div>
</EditForm>

<Toast @ref="toastService.ToastComponent" Duration="4000" IconClass="bi bi-info-circle" Persist="true"/>

@code {
	[Parameter]
	public int aporteId { get; set; }
	public Aportes aporte { get; set; } = new Aportes();
	public string observacionActual { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		if (aporteId > 0)
		{
			aporte = await aportesService.Buscar(aporteId);
			observacionActual = aporte.Observacion;
		}
	}

	public async Task Modificar()
	{
		if(!await Validar())
		{
			var modificar = await aportesService.Crear(aporte);
			if (modificar)
			{
				ShowToastSuccess();
				await Task.Delay(2000);
				Volver();
			}
			else
				ShowToastFail();
		}
		else
			ShowToastRepeated();
	}

	public void ShowToastSuccess() => toastService.ShowSuccessToast("Editar Aporte", "El aporte se modificó con éxito");
	public void ShowToastFail() => toastService.ShowDangerToast("Editar Aporte", "No pueden haber campos vacíos");
	public void ShowToastRepeated() => toastService.ShowErrorToast("Editar aporte", "Ya existe un aporte con esta observación");


	public void Volver()
	{
		navigation.NavigateTo("/Aportes");
	}

	public async Task<bool> Validar()
	{
		var observacion = await aportesService.BuscarObservacion(aporte.Observacion);

		if (observacion is not null)
		{
			if (observacion.Observacion == observacionActual)
				return false;
			else
				return true;
		}
		return false;
	}
}
